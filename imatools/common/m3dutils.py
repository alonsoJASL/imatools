import os
import sys
import json 
import numpy as np

def get_empty_pot() -> dict:
    pot = {
            'segmentation' : {
                'seg_dir': None,
                'seg_name': None,
                'mesh_from_segmentation': True, 
                'boundary_relabelling': False},
            'meshing': {
                'facet_angle': 30,
                'facet_size': 0.8,
                'facet_distance': 0.1,
                'cell_rad_edge_ratio': 2,
                'cell_size': 0.8,
                'rescaleFactor': 1000},
            'laplacesolver': {
                'abs_toll': 1e-6,
                'rel_toll': 1e-6,
                'itr_max': 700,
                'dimKrilovSp': 500,
                'verbose': True},
            'others': {
                'eval_thickness': False},
            'output': {
                'outdir': None,
                'name': None,
                'out_medit': False,
                'out_vtk': True, 
                'out_carp': True,
                'out_vtk_binary': False,
                'out_carp_binary': False,
                'out_potential': False}
            }

    return pot

def load_from_par(filename: str) :
    """
    Reads Meshtools3d parameter files and returns a dictionary
    """
    filename += '.par' if '.par' not in filename else ''
    with open(filename, 'r') as f:
        lines = f.readlines()

    pot = get_empty_pot()
    current_section = ''
    for line in lines:
        if '#' in line: # comment
            continue
        
        elif '[' in line: # section
            current_section = line.strip().strip('[').strip(']')
            print(f'Reading in section {current_section}')
            continue
        
        elif not line.strip(): # line is empty
            continue    
        
        elif '=' in line: 
            key, value = line.split('=')
            key = key.strip()
            value = value.strip()

            pot[current_section][key] = value

    return pot

def update_pot(pot: dict, new_pot: dict):
    update_pot = pot.copy()
    for section in new_pot.keys():
        for key, value in new_pot[section].items():
            if value is not None:
                update_pot[section][key] = value
            
    return update_pot

def save_pot(pot: dict, filename: str):
    with open(filename, 'w') as f:
        f.write('# Meshtools3d parameter file\n')
        f.write('# Generated by imatools.m3dutils \n\n')
        for section in pot.keys():
            f.write(f'[{section}]\n')
            for key, value in pot[section].items():
                value = int(value) if isinstance(value, bool) else value
                if key == 'seg_name':
                    value += '.inr' if '.inr' not in value else ''
                f.write(f'{key} = {value}\n')
            f.write('\n')
    return

def save_to_json(pot, out_path):
    with open(out_path, 'w') as f:
        json.dump(pot, f, indent=4)

    return

def load_from_json(in_path):
    in_path += '.json' if '.json' not in in_path else ''
    with open(in_path, 'r') as f:
        pot = json.load(f)
    return pot



